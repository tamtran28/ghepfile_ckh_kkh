import streamlit as st
import pandas as pd
import io
from typing import List

st.set_page_config(page_title="Gh√©p CKH/KKH & L·ªçc theo SOL/Chi nh√°nh", layout="wide")
st.title("üì¶ Gh√©p 20 file CKH/KKH ‚ûú üîé L·ªçc theo SOL / Chi nh√°nh")

# ---------- Helpers ----------
def read_any(file, tag:str):
    name = file.name.lower()
    if name.endswith(".csv"):
        df = pd.read_csv(file, dtype=str)
    elif name.endswith(".xlsx"):
        df = pd.read_excel(file, dtype=str, engine="openpyxl")
    elif name.endswith(".xls"):
        df = pd.read_excel(file, dtype=str)  # c·∫ßn xlrd n·∫øu l·ªói .xls c≈©
    else:
        st.error(f"File kh√¥ng h·ªó tr·ª£: {file.name}")
        return None
    df["__SOURCE__"] = file.name
    df["__TYPE__"] = tag  # CKH / KKH
    return df

def find_branch_col(cols: List[str]) -> str:
    # ∆Øu ti√™n c√°c t√™n c·ªôt th∆∞·ªùng g·∫∑p
    candidates = ["BRCD", "SOL", "BRANCH", "CHI_NHANH", "MA_CN", "BR_CODE"]
    up = {c.upper(): c for c in cols}
    for c in candidates:
        if c in up:
            return up[c]
    # fallback: ch·ªçn c·ªôt ƒë·∫ßu ti√™n d·∫°ng object
    for c in cols:
        return c
    return None

# ---------- Upload ----------
st.subheader("1) T·∫£i l√™n t·ªëi ƒëa 20 file m·ªói nh√≥m")
c1, c2 = st.columns(2)
with c1:
    files_ckh = st.file_uploader("üìÅ Ch·ªçn file CKH (t·ªëi ƒëa 20)", type=["csv","xlsx","xls"], accept_multiple_files=True, key="ckh")
with c2:
    files_kkh = st.file_uploader("üìÅ Ch·ªçn file KKH (t·ªëi ƒëa 20)", type=["csv","xlsx","xls"], accept_multiple_files=True, key="kkh")

# ---------- Read & concat ----------
dfs = []
if files_ckh:
    for f in files_ckh[:20]:
        df = read_any(f, "CKH")
        if df is not None:
            dfs.append(df)

if files_kkh:
    for f in files_kkh[:20]:
        df = read_any(f, "KKH")
        if df is not None:
            dfs.append(df)

if not dfs:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i l√™n c√°c file CKH/KKH ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

full_df = pd.concat(dfs, ignore_index=True)

# ---------- Ch·ªçn c·ªôt BRCD / SOL ----------
st.subheader("2) Ch·ªçn c·ªôt d√πng ƒë·ªÉ l·ªçc (m·∫∑c ƒë·ªãnh t·ª± nh·∫≠n BRCD/SOL)")
default_col = find_branch_col(full_df.columns.tolist())
branch_col = st.selectbox("C·ªôt d√πng ƒë·ªÉ l·ªçc:", options=list(full_df.columns), index=list(full_df.columns).index(default_col) if default_col in full_df.columns else 0)

# ---------- Nh·∫≠p ƒëi·ªÅu ki·ªán l·ªçc ----------
st.subheader("3) Nh·∫≠p SOL ho·∫∑c t√™n chi nh√°nh ƒë·ªÉ l·ªçc")
hint = "V√≠ d·ª•: 1201,1205 ho·∫∑c HANOI; c√≥ th·ªÉ nh·∫≠p nhi·ªÅu, ngƒÉn c√°ch b·ªüi d·∫•u ph·∫©y"
raw = st.text_input("Nh·∫≠p SOL / Chi nh√°nh:", placeholder=hint).strip()
exact_sol = st.checkbox("üîí Kh·ªõp **ch√≠nh x√°c** v·ªõi SOL (√°p d·ª•ng cho token l√† s·ªë)", value=False)

def build_mask(series: pd.Series, query: str, exact: bool):
    # series l√† c·ªôt branch_col
    s = series.astype(str).str.upper()
    tokens = [t.strip().upper() for t in query.split(",") if t.strip()]
    if not tokens:
        return pd.Series([True]*len(series))
    mask = pd.Series([False]*len(series))
    for t in tokens:
        if exact and t.isdigit():
            mask = mask | (s == t)
        else:
            mask = mask | s.str.contains(t, na=False)
    return mask

mask = build_mask(full_df[branch_col], raw, exact_sol)
filtered = full_df[mask].copy()

# ---------- Hi·ªÉn th·ªã ----------
st.success(f"ƒê√£ gh√©p {len(dfs)} b·∫£ng ‚Ä¢ T·ªïng d√≤ng: {len(full_df):,} ‚Ä¢ Sau l·ªçc: {len(filtered):,}")
with st.expander("üëÄ Xem d·ªØ li·ªáu ƒë√£ gh√©p (ch∆∞a l·ªçc)"):
    st.dataframe(full_df, use_container_width=True, height=300)
st.subheader("üìä K·∫øt qu·∫£ sau l·ªçc")
st.dataframe(filtered, use_container_width=True, height=420)

# ---------- Download ----------
def to_excel_bytes(df: pd.DataFrame) -> bytes:
    bio = io.BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="DATA")
    bio.seek(0)
    return bio.read()

c3, c4 = st.columns(2)
with c3:
    st.download_button(
        "üì• T·∫£i Excel: D·ªØ li·ªáu ƒë√£ gh√©p",
        data=to_excel_bytes(full_df),
        file_name="ALL_CKH_KKH_GHEP.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
with c4:
    st.download_button(
        "üì• T·∫£i Excel: K·∫øt qu·∫£ l·ªçc",
        data=to_excel_bytes(filtered),
        file_name="FILTERED_CKH_KKH.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
